/*
  
 __        __                                     _                 _     _      ____ 
 \ \      / /__ ___   _____ _ __  _   _ _ __ ___ | |__   ___ _ __  | |   | |    / ___|
  \ \ /\ / // _` \ \ / / _ \ '_ \| | | | '_ ` _ \| '_ \ / _ \ '__| | |   | |   | |    
   \ V  V /| (_| |\ V /  __/ | | | |_| | | | | | | |_) |  __/ |    | |___| |___| |___ 
    \_/\_/  \__,_| \_/ \___|_| |_|\__,_|_| |_| |_|_.__/ \___|_|    |_____|_____|\____|
                      
                   /|  
 ____       __   -- |     
(___ \      \ \    _|_    
  __) )______\ \            
 / __/(  __  )> \          
| |___ | || |/ ^ \        
|_____)|_||_/_/ \_\ 
                   
                   
Active Pickguard Firmware 

Copyright (C) <2011>  Eli Hughes 		ehughes@wavenumber.net

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>. 
                  
*/

#include "System.h"

/*
 * 
 * This is the Main Audio Processing routine.   Everything is done in the I2S Interrupt Routine
 * To ensure a constant sample rate,   the processing routine will always dump queued values to the DAC/I2S unit.
 * It will then read the last converted sample and then present it to the reset of the loop as SampleIn.
 * The processing Routines need to take this value an generate a q31_t value called SampleOut.  The max value should be 1/128
 * The last step is to initiate another conversion
 */  

#define DAC0_WHOLE 	(*(DWORD *)(0x400CC000))

BYTE q;
BYTE Phase = 0;
 DWORD			QueuedDACSampleOut = 0;
SIGNED_DWORD		QueuedI2CSampleOut = 0;
q31_t			SampleOut = 0;
q31_t 			SampleIn;
q31_t			SampleInBuf[16];
static BYTE 			SampleInPtr = 0;
q31_t 			Sum;

//To take advantage of the DSP library, we will use the q31 format.   
//The input signal will be scaled to a max value of 1/128.   This means that the input samples (16-bit) 
//will be shifted to the left by eight.   The output signal will also be assumed handle a max
//value of 1/128.  When data is sent to the DAC,  it will be shifted down by 12 bits.   For data going to the I2S unit,
//The lowest 24-bit of the Q31 signal can be dumped into the output register.
//
//The 1/128 max signal was chosen to balance precision and overflow in the cases where we aren't using the DSP instructions
// with the 64-bit accumulator.   Since none of the filters are of very high order,  we can accumulate into the Q31 datatype
//without having to scale very often to retain precision.

BYTE InhibitAudio = FALSE;

DWORD TranslateForDAC(q31_t In)
{
	if(In>SIGNAL_IN_MAX)
	{
		In = SIGNAL_IN_MAX;
	}
	else if(In<SIGNAL_IN_MIN)
	{
		In = SIGNAL_IN_MIN;
	}
	return (DWORD)((In>>12)+2048);	
}

DWORD TranslateForI2S(q31_t In)
{
	return ((In)>>1);	
}

void AudioProcess()
{
	BYTE i;
	SIGNED_WORD temp16;
	
	if(Phase++&0x01)
	{
		//We are in the Odd Phase.  Do Nothing
		I2S0_TX0 = QueuedI2CSampleOut;
	}
	else
	{
		DAC0_WHOLE = QueuedDACSampleOut;	
		I2S0_TX0 = QueuedI2CSampleOut;
	
		//We need to do an intermediate operation to get the ADC data.
		//The 32-bit ADC0_RA reg is not sign extended to 32-bits.  TO make the compiler happy
		//we need to do a 16-bit signed read and then recast to q31_t
		temp16 = ADC0_RA;
		
		SampleIn = (q31_t)(temp16)<<8;

		if(InhibitAudio == FALSE)
		{
			//See what the current Patch is and do the appropriate processing!
			switch(CurrentPatch)
			{
				default:
					break;
				
				case PATCH_SINE_TEST:
					
					SampleOut = ((q31_t)(Sine_15_0[q++]))<<8;
					
					break;
				
				case PATCH_PASS_THROUGH:
					
					SampleOut = SampleIn;
					
					break;
					
				case PATCH_ALPHA:
				
					SampleIn = SampleIn; 
					arm_biquad_cas_df1_32x64_q31(&MyAlphaIIR,&SampleIn,&SampleOut,1);
					arm_scale_q31(&SampleOut,AlphaIIR_Norm,0,&SampleOut,1);
					SampleIn=SampleOut;
					PickupTranslator(&SampleIn,&SampleOut);
					
			
					break;
					
				case PATCH_BETA:
					
					SampleIn = SampleIn; 
					arm_biquad_cas_df1_32x64_q31(&MyBetaIIR,&SampleIn,&SampleOut,1);
					arm_scale_q31(&SampleOut,BetaIIR_Norm,0,&SampleOut,1);
					SampleIn=SampleOut;
					PickupTranslator(&SampleIn,&SampleOut);
					
					break;
				
				case PATCH_GAMMA:
				
					arm_biquad_cas_df1_32x64_q31(&MyGammaIIR,&SampleIn,&SampleOut,1);
					arm_scale_q31(&SampleOut,GammaIIR_Norm,0,&SampleOut,1);
					overdrive(&SampleOut,&SampleOut);
					arm_scale_q31(&SampleOut,((q31_t)(DriveLevel)<<26),1,&SampleOut,1);
					overdrive(&SampleOut,&SampleOut);
			
					break;
				
				case PATCH_DELTA:
					
					PickupTranslator(&SampleIn,&SampleOut);
					Octave(&SampleOut,&SampleOut);
					arm_biquad_cas_df1_32x64_q31(&MyBetaIIR,&SampleIn,&SampleIn,1);
					arm_scale_q31(&SampleIn,BetaIIR_Norm,0,&SampleIn,1);
				
					 SampleOut += SampleIn>>1;
					
					break;
			}
		}
		else
		{
			SampleOut = SampleIn;
		}
		if(MuteActive == TRUE)
		{
			SampleOut = 0;
		}
		
		QueuedDACSampleOut = TranslateForDAC(SampleOut);
		QueuedI2CSampleOut = TranslateForI2S(SampleOut);
		
		//Start next Sample
		ADC0_SC1A  =  DIFF_DIFFERENTIAL | 1; 
	}
}



